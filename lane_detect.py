# -*- coding: utf-8 -*-
"""Lane_Detect.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zLt0IFobPylr09zegMkyh412F0nGHSvr
"""

import cv2
import numpy as np
import pathlib
import os

def calibrate_chessboard(dir_path, image_format, square_size, width, height):
    '''Calibrate a camera using chessboard images.'''
    # termination criteria
    gray = None
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)
    
    # prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(8,6,0)
    objp = np.zeros((height*width, 3), np.float32)
    objp[:, :2] = np.mgrid[0:width, 0:height].T.reshape(-1, 2)

    objp = objp * square_size

    # Arrays to store object points and image points from all the images.
    objpoints = []  # 3d point in real world space
    imgpoints = []  # 2d points in image plane.

    #images = pathlib.Path(dir_path).glob(f'*.{image_format}')
    files = os.listdir(dir_path)

    # filter files to only include those ending in .jpg
    images = [file for file in files if file.endswith(".jpg")]

    # Iterate through all images
    for fname in images:
        print("here")
        img = cv2.imread("calibration_imgs/"+str(fname))
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # Find the chess board corners
        ret, corners = cv2.findChessboardCorners(gray, (width, height), None)

        # If found, add object points, image points (after refining them)
        if ret:
            objpoints.append(objp)

            corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)
            imgpoints.append(corners2)

    # Calibrate camera
    ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

    return [ret, mtx, dist, rvecs, tvecs]

import cv2

def save_coefficients(mtx, dist, path):
    '''Save the camera matrix and the distortion coefficients to given path/file.'''
    cv_file = cv2.FileStorage(path, cv2.FILE_STORAGE_WRITE)
    cv_file.write('K', mtx)
    cv_file.write('D', dist)
    # note you *release* you don't close() a FileStorage object
    cv_file.release()

def load_coefficients(path):
    '''Loads camera matrix and distortion coefficients.'''
    # FILE_STORAGE_READ
    cv_file = cv2.FileStorage(path, cv2.FILE_STORAGE_READ)

    # note we also have to specify the type to retrieve other wise we only get a
    # FileNode object back instead of a matrix
    camera_matrix = cv_file.getNode('K').mat()
    dist_matrix = cv_file.getNode('D').mat()

    cv_file.release()
    return [camera_matrix, dist_matrix]

# Parameters
IMAGES_DIR = './calibration_imgs'
IMAGES_FORMAT = '.jpg'
SQUARE_SIZE = 3
WIDTH = 5
HEIGHT = 7

# Calibrate 
#ret, mtx, dist, rvecs, tvecs = calibrate_chessboard(
#    IMAGES_DIR, 
#    IMAGES_FORMAT, 
#    SQUARE_SIZE, 
#    WIDTH, 
#    HEIGHT
#)
# Save coefficients into a file
#save_coefficients(mtx, dist, "calibration_chessboard.yml")

import cv2

# Load coefficients
#mtx, dist = load_coefficients('calibration_chessboard.yml')
#original = cv2.imread('calibration_imgs/WIN_20230313_18_30_38_Pro.jpg')
#dst = cv2.undistort(original, mtx, dist, None, None)
#cv2.imwrite('undist.jpg', dst)

FULL_H = 360
IMAGE_H = 170
IMAGE_W = 640
src = np.float32([[0, FULL_H], [IMAGE_W, FULL_H], [0, FULL_H - IMAGE_H], [IMAGE_W, FULL_H - IMAGE_H]])
dst = np.float32([[IMAGE_W/2-82, IMAGE_H], [IMAGE_W/2+80, IMAGE_H], [0, 0], [IMAGE_W, 0]])
M = cv2.getPerspectiveTransform(src, dst)
M_inverse = cv2.getPerspectiveTransform(dst, src)
print(M)

def homography(frame):
    top_down = cv2.warpPerspective(frame, M, (IMAGE_W, IMAGE_H))
    return top_down

def undo_homography(frame):
    top_down = cv2.warpPerspective(frame, M_inverse, (IMAGE_W, FULL_H))
    return top_down

cap= cv2.VideoCapture('./test_vid.mp4')
ret, frame = cap.read()
frame2 = homography(frame)
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
print(frame.shape)
#writer = cv2.VideoWriter("flattened.mp4", fourcc, 10, (frame.shape[1], frame.shape[0]), True)
writer2 = cv2.VideoWriter("topview.mp4", fourcc, 10, (frame2.shape[1], frame2.shape[0]), True)
while(cap.isOpened()):
    ret, frame = cap.read()
    
    if ret == False:
        break
    flat_frame = frame#cv2.undistort(frame, mtx, dist, None, None)
    #writer.write(flat_frame)
    topview_frame = homography(flat_frame)
    writer2.write(topview_frame)

#writer.release()
writer2.release()

writer2.release()

import imutils

#def is_contour_bad(c):
#    return False

# Fit a polynomial to the left and right lanes
#def filter_contours(frame):
#    cnts = cv2.findContours(frame.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
#    cnts = imutils.grab_contours(cnts)

#    if not cnts:
#        return frame

#    for c in cnts:
#        if is_contour_bad(c):
#            cv2.drawContours(frame, [c], contourIdx=-1, color=0, thickness=-1)

#    return frame

def fit_polynomial(binary_warped):
    # Find the starting points for the left and right lanes
    histogram = np.sum(binary_warped[binary_warped.shape[0]//2:,:], axis=0)
    ##print(histogram)
    midpoint = np.int(histogram.shape[0]/2)
    try:
        leftx_base = np.max(np.nonzero(histogram[:midpoint]))
        rightx_base = np.min(np.nonzero(histogram[midpoint:])) + midpoint
    except:
        return None, None
    
    # Set the number of sliding windows
    nwindows = 5
    
    # Set the width of the windows
    margin = 50
    
    # Set minimum number of pixels found to recenter window
    minpix = 100
    
    # Set height of windows
    window_height = np.int(binary_warped.shape[0]/nwindows)
    
    # Identify the x and y positions of all nonzero pixels in the image
    nonzero = binary_warped.nonzero()
    nonzeroy = np.array(nonzero[0])
    nonzerox = np.array(nonzero[1])
    
    # Current positions to be updated later for each window in nwindows
    leftx_current = leftx_base
    rightx_current = rightx_base
    
    # Create empty lists to receive left and right lane pixel indices
    left_lane_inds = []
    right_lane_inds = []
    
    # Step through the windows one by one
    for window in range(nwindows):
        # Identify window boundaries in x and y (and right and left)
        win_y_low = binary_warped.shape[0] - (window+1)*window_height
        win_y_high = binary_warped.shape[0] - window*window_height
        win_xleft_low = leftx_current - margin
        win_xleft_high = leftx_current + margin
        win_xright_low = rightx_current - margin
        win_xright_high = rightx_current + margin
        
        # Identify the nonzero pixels in x and y within the window
        good_left_inds = ((nonzeroy >= win_y_low) & (nonzeroy < win_y_high) & 
                          (nonzerox >= win_xleft_low) &  (nonzerox < win_xleft_high)).nonzero()[0]
        good_right_inds = ((nonzeroy >= win_y_low) & (nonzeroy < win_y_high) & 
                           (nonzerox >= win_xright_low) &  (nonzerox < win_xright_high)).nonzero()[0]
        
        # Append these indices to the lists
        left_lane_inds.append(good_left_inds)
        right_lane_inds.append(good_right_inds)
        
        # If you found > minpix pixels, recenter next window on their mean position
        if len(good_left_inds) > minpix:
            leftx_current = np.int(np.mean(nonzerox[good_left_inds]))
        if len(good_right_inds) > minpix:        
            rightx_current = np.int(np.mean(nonzerox[good_right_inds]))
    
    # Concatenate the arrays of indices
    left_lane_inds = np.concatenate(left_lane_inds)
    right_lane_inds = np.concatenate(right_lane_inds)
    
    # Extract left and right line pixel positions
    leftx = nonzerox[left_lane_inds]
    lefty = nonzeroy[left_lane_inds] 
    rightx = nonzerox[right_lane_inds]
    righty = nonzeroy[right_lane_inds]
    
    # Fit a second order polynomial to each line
    left_fit = np.polyfit(lefty, leftx, 2)
   
    right_fit = np.polyfit(righty, rightx, 2)
    
    return left_fit, right_fit

def tune_fit(binary_warped, left_fit, right_fit):
	"""
	Given a previously fit line, quickly try to find the line based on previous lines
	"""
	# Assume you now have a new warped binary image
	# from the next frame of video (also called "binary_warped")
	# It's now much easier to find line pixels!
	nonzero = binary_warped.nonzero()
	nonzeroy = np.array(nonzero[0])
	nonzerox = np.array(nonzero[1])
	margin = 100
	left_lane_inds = ((nonzerox > (left_fit[0]*(nonzeroy**2) + left_fit[1]*nonzeroy + left_fit[2] - margin)) & (nonzerox < (left_fit[0]*(nonzeroy**2) + left_fit[1]*nonzeroy + left_fit[2] + margin)))
	right_lane_inds = ((nonzerox > (right_fit[0]*(nonzeroy**2) + right_fit[1]*nonzeroy + right_fit[2] - margin)) & (nonzerox < (right_fit[0]*(nonzeroy**2) + right_fit[1]*nonzeroy + right_fit[2] + margin)))

	# Again, extract left and right line pixel positions
	leftx = nonzerox[left_lane_inds]
	lefty = nonzeroy[left_lane_inds]
	rightx = nonzerox[right_lane_inds]
	righty = nonzeroy[right_lane_inds]

	# If we don't find enough relevant points, return all None (this means error)
	min_inds = 10
	if lefty.shape[0] < min_inds or righty.shape[0] < min_inds:
		return None, None

	# Fit a second order polynomial to each
	left_fit = np.polyfit(lefty, leftx, 2)
	right_fit = np.polyfit(righty, rightx, 2)

	return left_fit, right_fit

# Visualize the resulting lanes
def visualize_lanes(binary_warped, left_fit, right_fit):
    # Generate x and y values for plotting
    ploty = np.linspace(0, binary_warped.shape[0]-1, binary_warped.shape[0])
    left_fitx = left_fit[0]*ploty**2 + left_fit[1]*ploty + left_fit[2]
    right_fitx = right_fit[0]*ploty**2 + right_fit[1]*ploty + right_fit[2]
    
    # Create an image to draw the lines on
    warp_zero = np.zeros_like(binary_warped).astype(np.uint8)
    color_warp = np.dstack((warp_zero, warp_zero, warp_zero))
    
    # Recast the x and y points into usable format for cv2.fillPoly()
    pts_left = np.array([np.transpose(np.vstack([left_fitx, ploty]))])
    pts_right = np.array([np.flipud(np.transpose(np.vstack([right_fitx, ploty])))])
    pts = np.hstack((pts_left, pts_right))
    
    # Draw the lane onto the warped blank image
    cv2.fillPoly(color_warp, np.int_([pts]), (0,255,0))
    
    # Warp the blank back to original image space using inverse perspective matrix (Minv)
    #Minv = cv2.getPerspectiveTransform(dst, src)
    #newwarp = cv2.warpPerspective(color_warp, Minv, (binary_warped.shape[1], binary_warped.shape[0]))
    
    # Combine the result with the original image
    #result = cv2.addWeighted(img, 1, newwarp, 0.3, 0)
    
    return color_warp

cap= cv2.VideoCapture('./test_vid.mp4')
ret, frame = cap.read()
frame2 = homography(frame)
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
print(frame.shape)
writer = cv2.VideoWriter("flattened.mp4", fourcc, 10, (frame2.shape[1], frame2.shape[0]), False)
writer4 = cv2.VideoWriter("postmask.mp4", fourcc, 10, (frame2.shape[1], frame2.shape[0]), False)
writer2 = cv2.VideoWriter("topview.mp4", fourcc, 10, (frame2.shape[1], frame2.shape[0]), True)
writer3 = cv2.VideoWriter("lanes.mp4", fourcc, 5, (frame.shape[1], frame.shape[0]), isColor=True)

i = 0
left_fit, right_fit = None, None
result = None
while(cap.isOpened()):
    ret, frame = cap.read()
    if ret == False or i == 300:
        break
    i+= 1
    flat_frame = frame#cv2.undistort(frame, mtx, dist, None, None)
    img = homography(flat_frame)
    writer2.write(img)
    # Convert to grayscale
    #gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

    # Define color ranges for yellow and white
    lower_yellow = np.array([20, 100, 100])
    upper_yellow = np.array([30, 255, 255])
    lower_white = np.array([0, 0, 200])
    upper_white = np.array([255, 40, 255])

    # Create masks for yellow and white pixels
    mask_yellow = cv2.inRange(hsv, lower_yellow, upper_yellow)
    mask_white = cv2.inRange(hsv, lower_white, upper_white)
    gray = cv2.bitwise_or(mask_yellow, mask_white)

    #gray = filter_contours(gray)

    #gray = cv2.cvtColor(mask_yw , cv2.COLOR_BGR2GRAY)
    # Apply Gaussian blur
    
    blur = cv2.GaussianBlur(gray, (3, 3), 0)
    #blur = gray

    # Apply Canny edge detection
    edges = cv2.Canny(blur, 50, 150)
    #edges = blur
    #print(edges.shape)

    # Define the region of interest
    mask = np.zeros_like(edges)
    height, width = img.shape[:2]
    vertices = np.array([[(width//2-120, height), (width//2-30, 0), (width//2+150, 0), (width//2+80, height)]], dtype=np.int32)
    cv2.fillPoly(mask, vertices, 255)
    masked_edges = cv2.bitwise_and(edges, mask)
    #print(masked_edges.shape)
    #masked_edges = filter_contours(masked_edges)
    writer.write(mask)
    writer4.write(edges)

    
    try:
        left_fit, right_fit = fit_polynomial(masked_edges)
    except:
        left_fit, right_fit = None, None


    if left_fit is not None and right_fit is not None:
        result = undo_homography(visualize_lanes(masked_edges, left_fit, right_fit))
    overlay = cv2.addWeighted(frame, 1, result, .2, 0)

    writer3.write(overlay)
    

writer.release()
writer2.release()
writer3.release()
writer4.release()

